package ru.maksonic.beresta.ui.theme.color.app_palette

import ru.maksonic.beresta.ui.theme.color.AppColor
import ru.maksonic.beresta.ui.theme.color.color_palette.Palette
import ru.maksonic.beresta.ui.theme.color.PlaceholderColors
import ru.maksonic.beresta.ui.theme.color.color_palette.PaletteImageComponent
import ru.maksonic.beresta.ui.theme.color.color_palette.ImagePalette

/**
 * @Author maksonic on 25.02.2023
 */
val baseLightPalette = AppColor(
    primary = Palette.Blue.azureRadiance,
    onPrimary = Palette.Blue.coolBlack,
    primaryContainer = Palette.white,
    onPrimaryContainer = Palette.nero,
    secondary = Palette.alto,
    onSecondary = Palette.nero,
    secondaryContainer = Palette.snow,
    onSecondaryContainer = Palette.alto,
    tertiary = Palette.chineseSilver,
    onTertiary = Palette.Blue.coolBlack,
    tertiaryContainer = Palette.Blue.azureRadiance,
    onTertiaryContainer = Palette.white,
    error = Palette.error,
    onError = Palette.onError,
    errorContainer = Palette.errorContainer,
    onErrorContainer = Palette.onErrorContainer,
    background = Palette.snow,
    onBackground = Palette.nero,
    surface = Palette.snow,
    onSurface = Palette.netural,
    surfaceVariant = Palette.lightSilver,
    onSurfaceVariant = Palette.chineseSilver,
    outline = Palette.doveGray,
    inverseOnSurface = Palette.white,
    inverseSurface = Palette.gray,
    inversePrimary = Palette.white,
    surfaceTint = Palette.gray,
    outlineVariant = Palette.lightSilver,
    scrim = Palette.black.copy(alpha = 0.24f),
    snack = Palette.nero,
    onSnack = Palette.snow,
    onSnackContainer = Palette.Blue.anakiwa,
    transparent = Palette.transparent,
    idle = Palette.Blue.azureRadiance,
    black = Palette.black,
    blue = Palette.Blue.azureRadiance,
    green = Palette.Green.electricGreen,
    purple = Palette.Purple.electricViolet,
    red = Palette.Red.coralRed,
    orange = Palette.Orange.vividGamboge,
    yellow = Palette.Yellow.bananaYellow,
    placeholderColors = PlaceholderColors(
        c0 = ImagePalette.Blue.Light.c0,
        c1 = ImagePalette.Blue.Light.c1,
        c2 = ImagePalette.Blue.Light.c2,
        c3 = ImagePalette.Blue.Light.c3,
        c4 = ImagePalette.Blue.Light.c4,
        f0 = PaletteImageComponent.Folder.Light.f0,
        f1 = PaletteImageComponent.Folder.Light.f1,
        f2 = PaletteImageComponent.Folder.Light.f2,
        f3 = PaletteImageComponent.Folder.Light.f3,
        t0 = PaletteImageComponent.Trash.Light.t0,
        t1 = PaletteImageComponent.Trash.Light.t1,
        t2 = PaletteImageComponent.Trash.Light.t2,
        t3 = PaletteImageComponent.Trash.Light.t3,
        s0 = PaletteImageComponent.Search.Light.s0,
        s1 = PaletteImageComponent.Search.Light.s1,
        s2 = PaletteImageComponent.Search.Light.s2,
        s3 = PaletteImageComponent.Search.Light.s3,
    )
)

val baseDarkPalette = AppColor(
    primary = Palette.snow,
    onPrimary = Palette.snow,
    primaryContainer = Palette.mineShaft,
    onPrimaryContainer = Palette.white,
    secondary = Palette.tundora,
    onSecondary = Palette.white,
    secondaryContainer = Palette.mineShaft,
    onSecondaryContainer = Palette.gray,
    tertiary = Palette.gray,
    onTertiary = Palette.white,
    tertiaryContainer = Palette.Blue.anakiwa,
    onTertiaryContainer = Palette.nero,
    error = Palette.errorDark,
    onError = Palette.onErrorDark,
    errorContainer = Palette.errorContainerDark,
    onErrorContainer = Palette.onErrorContainerDark,
    background = Palette.nero,
    onBackground = Palette.white,
    surface = Palette.nero,
    onSurface = Palette.white,
    surfaceVariant = Palette.tundora,
    onSurfaceVariant = Palette.doveGray,
    outline = Palette.lightSilver,
    inverseOnSurface = Palette.mineShaft,
    inverseSurface = Palette.chineseSilver,
    inversePrimary = Palette.tundora,
    surfaceTint = Palette.white,
    outlineVariant = Palette.doveGray,
    scrim = Palette.black.copy(alpha = 0.32f),
    snack = Palette.tundora,
    onSnack = Palette.snow,
    onSnackContainer = Palette.snow,
    transparent = Palette.transparent,
    idle = Palette.Blue.azureRadiance,
    black = Palette.white,
    blue = Palette.Blue.anakiwa,
    green = Palette.Green.mintGreen,
    purple = Palette.Purple.paleViolet,
    red = Palette.Red.roseBud,
    orange = Palette.Orange.peachOrange,
    yellow = Palette.Yellow.pastelYellow,
    placeholderColors = PlaceholderColors(
        c0 = ImagePalette.Blue.Dark.c0,
        c1 = ImagePalette.Blue.Dark.c1,
        c2 = ImagePalette.Blue.Dark.c2,
        c3 = ImagePalette.Blue.Dark.c3,
        c4 = ImagePalette.Blue.Dark.c4,
        f0 = PaletteImageComponent.Folder.Dark.f0,
        f1 = PaletteImageComponent.Folder.Dark.f1,
        f2 = PaletteImageComponent.Folder.Dark.f2,
        f3 = PaletteImageComponent.Folder.Dark.f3,
        t0 = PaletteImageComponent.Trash.Dark.t0,
        t1 = PaletteImageComponent.Trash.Dark.t1,
        t2 = PaletteImageComponent.Trash.Dark.t2,
        t3 = PaletteImageComponent.Trash.Dark.t3,
        s0 = PaletteImageComponent.Search.Dark.s0,
        s1 = PaletteImageComponent.Search.Dark.s1,
        s2 = PaletteImageComponent.Search.Dark.s2,
        s3 = PaletteImageComponent.Search.Dark.s3,
    )
)

val highContrastPalette = AppColor(
    primary = Palette.snow,
    onPrimary = Palette.snow,
    primaryContainer = Palette.nero,
    onPrimaryContainer = Palette.white,
    secondary = Palette.doveGray,
    onSecondary = Palette.white,
    secondaryContainer = Palette.nero,
    onSecondaryContainer = Palette.doveGray,
    tertiary = Palette.doveGray,
    onTertiary = Palette.white,
    tertiaryContainer = Palette.Blue.anakiwa,
    onTertiaryContainer = Palette.nero,
    error = Palette.errorDark,
    onError = Palette.onErrorDark,
    errorContainer = Palette.errorContainerDark,
    onErrorContainer = Palette.onErrorContainerDark,
    background = Palette.black,
    onBackground = Palette.white,
    surface = Palette.black,
    onSurface = Palette.white,
    surfaceVariant = Palette.tundora,
    onSurfaceVariant = Palette.tundora,
    outline = Palette.chineseSilver,
    inverseOnSurface = Palette.mineShaft,
    inverseSurface = Palette.chineseSilver,
    inversePrimary = Palette.tundora,
    surfaceTint = Palette.white,
    outlineVariant = Palette.black,
    scrim = Palette.black.copy(alpha = 0.8f),
    snack = Palette.tundora,
    onSnack = Palette.white,
    onSnackContainer = Palette.Blue.frenchPassLight,
    transparent = Palette.transparent,
    idle = Palette.Blue.azureRadiance,
    black = Palette.mineShaft,
    blue = Palette.Blue.azureRadiance,
    green = Palette.Green.electricGreen,
    purple = Palette.Purple.electricViolet,
    red = Palette.Red.coralRed,
    orange = Palette.Orange.vividGamboge,
    yellow = Palette.Yellow.bananaYellow,
    placeholderColors = PlaceholderColors(
        c0 = ImagePalette.Blue.Dark.c0,
        c1 = ImagePalette.Blue.Dark.c1,
        c2 = ImagePalette.Blue.Dark.c2,
        c3 = ImagePalette.Blue.Dark.c3,
        c4 = ImagePalette.Blue.Dark.c4,
        f0 = PaletteImageComponent.Folder.Dark.f0,
        f1 = PaletteImageComponent.Folder.Dark.f1,
        f2 = PaletteImageComponent.Folder.Dark.f2,
        f3 = PaletteImageComponent.Folder.Dark.f3,
        t0 = PaletteImageComponent.Trash.Dark.t0,
        t1 = PaletteImageComponent.Trash.Dark.t1,
        t2 = PaletteImageComponent.Trash.Dark.t2,
        t3 = PaletteImageComponent.Trash.Dark.t3,
        s0 = PaletteImageComponent.Search.Dark.s0,
        s1 = PaletteImageComponent.Search.Dark.s1,
        s2 = PaletteImageComponent.Search.Dark.s2,
        s3 = PaletteImageComponent.Search.Dark.s3,
    )
)